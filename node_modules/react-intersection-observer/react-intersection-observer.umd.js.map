{"version":3,"file":"react-intersection-observer.umd.js","sources":["../src/observers.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .filter(Boolean)\n    .sort()\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          observer.thresholds.some(\n            (threshold) => entry.intersectionRatio >= threshold,\n          );\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ObserverMap","Map","RootIds","rootId","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","filter","Boolean","sort","map","key","createObserver","id","instance","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","thresholds","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","observe","element","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","node","triggerOnce","skip","setState","initialInView","undefined","observeNode","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_unobserveCb","handleChange","render","ref","handleNode","as","tag","React","useInView","setRef","current","Array","isArray","useEffect","result"],"mappings":"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"}